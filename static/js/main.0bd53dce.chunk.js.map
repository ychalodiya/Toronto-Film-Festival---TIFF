{"version":3,"sources":["Components/Header.js","Components/Footer.js","Components/MovieList.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","message","react_default","a","createElement","className","title","Footer","MovieList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","movies","getMovieData","arr","i","axios","get","params","api_key","process","language","page","movieData","results","data","filter","index","Date","release_date","getFullYear","push","sort","b","setState","_this2","map","item","movieName","original_title","description","overview","popularity","image","poster_path","id","key","onClick","setSelectedMovie","src","concat","alt","length","renderMovies","renderLoader","Component","App","movieID","Selected_Movie_ID","Components_Header","src_Components_MovieList","Components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0bd53dce.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header(props) {\n    // Default Message if not assign new one\n    const message = props.message ? props.message : 'Welcome To The Film Festival';\n\n    return (\n        <header className= \"headerComponent\">\n            <h1> {props.title} </h1>\n            <h2> {message} </h2>\n        </header>\n    );\n}\nexport default Header;","import React from 'react';\n\nfunction Footer(props) {\n    return (\n        <footer className= \"footerComponent\">\n            <h1> &copy; This is Toronto Movie Festival 2019.</h1>\n        </footer>\n    );\n}\nexport default Footer;","import React, { Component } from 'react';\nimport './MovieList.css';\n\nimport axios from 'axios';\n\nconst TORONTO_MOVIE_FEST_API_KEY = process.env.REACT_APP_TORONTO_MOVIE_FEST_API_KEY;\nconst language = 'en-US';\n\nclass MovieList extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            movies: []\n        };\n    }\n\n    componentDidMount() {\n        // requesting data using the following function\n        this.getMovieData();\n    }\n\n    async getMovieData() {\n        let arr = [];\n\n        // it will make 40 request becuase of limit and store the results into an array\n        for(let i=1; i<39; i++){\n            const movieData = await axios.get('https://api.themoviedb.org/3/trending/movie/day',{\n                params : {\n                    api_key : TORONTO_MOVIE_FEST_API_KEY,\n                    language,\n                    page: i\n                }\n            });\n\n            const { results } = movieData.data;\n            let data = results.filter(index => {\n                let year2019 = new Date(index.release_date).getFullYear();\n                if( year2019 === 2019) {\n                    arr.push(index);\n                    return arr\n                }\n            });\n        }\n\n        // sort the movie by releasing date\n        arr.sort(function(a, b){\n            let date1 = new Date(a.release_date),date2 = new Date(b.release_date)\n            return date1 - date2\n        });\n\n        this.setState({\n            movies: arr\n        }); \n    }\n\n    renderLoader() {\n        return <p> ...Loading </p>\n    }\n\n    renderMovies() {\n        const { movies } = this.state;\n        const movieHTML = movies.map( item => {\n        const { \n            original_title: movieName,\n            overview: description,\n            popularity,\n            release_date,\n            poster_path: image,\n            id\n        } = item;\n\n            // if popularity is less than 10 than it's won't render the data\n            if(popularity > 10) {\n                return(\n                    <div \n                        key= {id}\n                        className= \"movieCard\"\n                        onClick = {() => {\n                            this.props.setSelectedMovie(id)\n                        }}\n                    >\n                    <div className=\"imgDiv\">\n                        <img src={`https://image.tmdb.org/t/p/w300_and_h450_bestv2${image}`} alt=\"\" />\n                    </div>\n                    <div className=\"contentDiv\">\n                        <h2 className=\"movieName\"> Movie Name: { movieName }</h2>\n                        <h4> Release Date: { release_date } </h4>\n                        <h4> Popularity: { popularity }</h4>\n                        <p><span className=\"description\">Description:</span> { description }</p>\n                    </div>\n                    </div>\n                );\n            }\n        });\n        return movieHTML;\n    }\n\n    render() {\n        return (\n            <section className= \"movieListComponent\">\n                <h2> -:Here's The List Of Movie:- </h2>\n                <div className= \"movieList\">\n                    {\n                        this.state.movies.length\n                        ? this.renderMovies()\n                        : this.renderLoader()\n                    }   \n                </div>\n            </section>\n        )\n    }\n\n}\nexport default MovieList;","import React, { Component } from 'react';\nimport './App.css';\n\n// importing components\nimport Header from './Components/Header';\nimport Footer from './Components/Footer';\nimport MovieList from './Components/MovieList';\n// import MovieCard from './Components/MovieCard';\n\n// https://api.themoviedb.org/3/movie/550?api_key=d1533d4ca4c407672b61788a01df4c08\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      Selected_Movie_ID : null\n    };\n  }\n  setSelectedMovie = (movieID) => {\n    // console.log(movieID);\n    this.setState({\n      Selected_Movie_ID: movieID\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <main>\n          <Header title= \"Toronto International Film Festival\" />\n          <main>\n            <MovieList setSelectedMovie = { this.setSelectedMovie }/>\n            {/* <MovieCard Selected_Movie_ID = { this.state.Selected_Movie_ID }/> */}\n          </main>\n          <Footer />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}