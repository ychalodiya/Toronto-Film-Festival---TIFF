{"version":3,"sources":["Components/loading.gif","Components/Header.js","Components/Footer.js","Components/MovieList.js","App.js","Components/MovieCard.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","message","react_default","a","createElement","className","title","Footer","TORONTO_MOVIE_FEST_API_KEY","process","language","arr","MovieList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","SelectedMovie","_ref","asyncToGenerator","regenerator_default","mark","_callee","ID","flag","cast","tagline_and_runtime","_tagline_and_runtime$","tagline","runtime","genres","overview","release_date","timer","genreHTML","castHTML","castHeader","castContainer","wrap","_context","prev","next","document","getElementById","hasChildNodes","axios","get","concat","params","api_key","sent","data","createContainer","runtimeConverter","map","item","name","join","castimg","profile_path","innerText","appendChild","innerHTML","stop","_x","apply","arguments","lable","lableData","loadmore","style","visibility","console","log","state","start","getMovieData","movies","i","page","sort_by","primary_release_date.gte","with_original_language","primary_release_date.lte","movieData","results","filter","index","push","setState","time","hours","roundedHours","Math","floor","minutes","round","_this2","movieHTML","movieName","original_title","popularity","image","poster_path","id","key","onClick","src","alt","length","renderMovies","renderLoader","value","loader","Component","App","setSelectedMovie","movieID","Selected_Movie_ID","Components_Header","src_Components_MovieList","Components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.776a5cd1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.00419e7b.gif\";","import React from 'react';\n\nfunction Header(props) {\n    // Default Message if not assign new one\n    const message = props.message ? props.message : 'Welcome To The Film Festival';\n\n    return (\n        <header className= \"headerComponent\">\n            <h1> {props.title} </h1>\n            <h2> {message} </h2>\n        </header>\n    );\n}\nexport default Header;","import React from 'react';\n\nfunction Footer(props) {\n    return (\n        <footer className= \"footerComponent\">\n            <h1> @ Toronto Movie Festival 2019.</h1>\n        </footer>\n    );\n}\nexport default Footer;","import React, { Component } from 'react';\nimport './MovieList.css';\nimport axios from 'axios';\nimport loader from './loading.gif';\n\nconst TORONTO_MOVIE_FEST_API_KEY = process.env.REACT_APP_TORONTO_MOVIE_FEST_API_KEY;\nconst language = 'en-US';\nlet arr =[];\n\nclass MovieList extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            movies: [],\n            start: 1\n        };\n    }\n\n    componentDidMount() {\n        // requesting data using the following function\n        this.getMovieData(this.state.start);\n    }\n    \n    async getMovieData(start) {\n        // it will make 40 request becuase of limit and store the results into an array\n\n        for(let i=start; i< start+39; i++) {\n            const movieData = await axios.get(`https://api.themoviedb.org/3/discover/movie`,{\n                params : {\n                    api_key: TORONTO_MOVIE_FEST_API_KEY,\n                    page: i,\n                    language,\n                    sort_by: 'primary_release_date.asc',\n                    'primary_release_date.gte': '2019-01-01',\n                    with_original_language: 'en',\n                    'primary_release_date.lte':'2019-12-31'\n                }\n            });\n\n            const { results } = movieData.data;\n            let data = results.filter(index => {\n                    arr.push(index);\n                    return arr   \n            });\n        }\n\n        if(start < 157){\n            document.getElementById('loadmore').style.visibility = 'visible';\n            this.setState({\n                movies: arr,\n                start: start + 39\n            });   \n        } else {\n            document.getElementById('loader').style.visibility = 'hidden';\n        }\n    }\n\n    renderLoader() {\n        // return  <img id=\"loader\" src={loader} alt=\"loader\"/>\n    }\n\n    // It will convert minutes into hours and minutes\n    runtimeConverter(time) {\n        let hours = (time / 60);\n        let roundedHours = Math.floor(hours);\n        let minutes = (hours - roundedHours) * 60;\n        let roundedMinutes = Math.round(minutes);\n        return roundedHours + \" Hour(s) and \"+ roundedMinutes + \" minute(s)\";\n    }\n\n    SelectedMovie = async ID => {\n        let flag = document.getElementById(ID);\n        let ans = flag.hasChildNodes();\n\n        // Render Cast Container only once.\n        if(!ans){\n            const cast = await axios.get(`https://api.themoviedb.org/3/movie/${ID}/credits`,{\n                params : {\n                    api_key: TORONTO_MOVIE_FEST_API_KEY\n                }\n            });\n\n            const tagline_and_runtime = await axios.get(`https://api.themoviedb.org/3/movie/${ID}`,{\n                params : {\n                    api_key : TORONTO_MOVIE_FEST_API_KEY,\n                    language\n                }\n            });\n\n            const {tagline, runtime, genres, overview, release_date} = tagline_and_runtime.data;\n            \n            this.createContainer('Release Date: ', release_date, ID);\n            this.createContainer('Description: ', overview, ID);\n            this.createContainer('Tagline: ', tagline, ID);\n\n            let timer = this.runtimeConverter(runtime);\n            this.createContainer('Runtime: ', timer, ID);\n            \n            const genreHTML = genres.map( item => {\n                return  item.name;\n            }).join(\", \");\n\n            this.createContainer('Genres: ', genreHTML, ID);\n\n            const castHTML = cast.data.cast.map( item => {\n            const {name, profile_path:castimg } = item;\n                // Display Cast only if Image source is available\n                if(castimg){\n                    return(\n                        `<span>\n                            <img src=\"https://image.tmdb.org/t/p/w66_and_h66_face/${castimg}\"\n                            alt=\"${name}\" title=\"${name}\"/>\n                        </span>`\n                    );\n                }\n            });\n\n            let castHeader = document.createElement('h4');\n            castHeader.innerText ='Cast:';\n            document.getElementById(ID).appendChild(castHeader);\n    \n            let castContainer = document.createElement('div');\n            castContainer.innerHTML = castHTML.join(\" \");\n            document.getElementById(ID).appendChild(castContainer);\n        }\n    }\n\n    createContainer = (title, data, ID) => {\n\n        let lable = document.createElement('h4');\n        lable.innerText = title;\n        document.getElementById(ID).appendChild(lable);\n\n        let lableData = document.createElement('span');\n        lableData.innerHTML = data;\n        lable.appendChild(lableData);\n    }\n\n    loadmore = () => {\n        document.getElementById('loadmore').style.visibility = 'hidden';\n        console.log(this.state.start);\n        document.getElementById('loader').style.visibility = 'visible';\n        this.getMovieData(this.state.start);\n    }\n\n    renderMovies() {\n        const { movies } = this.state;\n        const movieHTML = movies.map((item, ) => {\n        const { \n            original_title: movieName,\n            popularity,\n            poster_path: image,\n            id\n        } = item;\n\n            // if popularity is less than 10 than it's won't render the data\n            if(popularity > 10) {\n                return(\n                    <div key= {id} className= \"movieCard\"\n                        onClick = {\n                            () => {\n                                this.SelectedMovie(id); \n                            }\n                        }\n                    >\n                        <div className=\"imgDiv\">\n                            <img src={`https://image.tmdb.org/t/p/w300_and_h450_bestv2${image}`} alt=\"\" />\n                        </div>\n                        <div className=\"contentDiv\" >\n                            <h2 className=\"movieName\"> Movie: { movieName }</h2>\n                            <div id={id}></div>\n                        </div>\n                    </div>\n                );\n            }\n        });\n        document.getElementById('loadmore').style.visibility = 'visible';\n        document.getElementById('loader').style.visibility = 'hidden';\n        return movieHTML;\n    }\n\n    render() {\n        return (\n            <section className= \"movieListComponent\">\n                <h2> -:Here's The List Of Movie:- </h2>\n                \n                <div className= \"movieList\">\n                    {\n                        this.state.movies.length\n                        ? this.renderMovies()\n                        : this.renderLoader()\n                    }   \n                </div>\n                <div>\n                    <button id=\"loadmore\" value=\"load more...\" onClick={this.loadmore}>Load More Movies...</button>\n                </div>\n                <img id=\"loader\" src={loader} alt=\"loader\"/>\n            </section>\n        )\n    }\n}\n\nexport default MovieList;","import React, { Component } from 'react';\nimport './App.css';\n\n// importing components\nimport Header from './Components/Header';\nimport Footer from './Components/Footer';\nimport MovieList from './Components/MovieList';\nimport MovieCard from './Components/MovieCard';\n\n// https://api.themoviedb.org/3/movie/550?api_key=d1533d4ca4c407672b61788a01df4c08\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      Selected_Movie_ID : null\n    };\n  }\n  setSelectedMovie = (movieID) => {\n    // console.log(movieID);\n    this.setState({\n      Selected_Movie_ID: movieID\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <main>\n          <Header title= \"Toronto International Film Festival\" />\n          <main>\n            <MovieList setSelectedMovie = { this.setSelectedMovie }/>\n            {/* <MovieCard Selected_Movie_ID = { this.state.Selected_Movie_ID }/> */}\n          </main>\n          <Footer />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass MovieCard extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            movie: []\n        }\n    }\n}\nexport default MovieCard;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}